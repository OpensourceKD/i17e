(self.webpackChunkshell=self.webpackChunkshell||[]).push([[845],{2845:(p,S,l)=>{l.r(S),l.d(S,{DummyDataService:()=>b});var d=l(2485),g=l(5565);let b=(()=>{class v{constructor(){this.salesExecutivesSubject=new d.BehaviorSubject(this.generateSalesExecutives()),this.salesExecutives$=this.salesExecutivesSubject.asObservable(),this.salesRecordsSubject=new d.BehaviorSubject(this.generateSalesRecords()),this.salesRecords$=this.salesRecordsSubject.asObservable(),this.incentiveRulesSubject=new d.BehaviorSubject(this.generateIncentiveRules()),this.incentiveRules$=this.incentiveRulesSubject.asObservable(),this.incentivesEarnedSubject=new d.BehaviorSubject(this.generateIncentivesEarned()),this.incentivesEarned$=this.incentivesEarnedSubject.asObservable()}generateSalesExecutives(){return[{id:"1",name:"John Doe",email:"john.doe@example.com",teamId:"team1"},{id:"2",name:"Jane Smith",email:"jane.smith@example.com",teamId:"team1"},{id:"3",name:"Bob Johnson",email:"bob.johnson@example.com",teamId:"team2"},{id:"4",name:"Alice Williams",email:"alice.williams@example.com",teamId:"team2"},{id:"5",name:"Charlie Brown",email:"charlie.brown@example.com",teamId:"team1"}]}generateSalesRecords(){const t=[],s=this.generateSalesExecutives(),a=["Product A","Product B","Product C","Product D"],c=["completed","pending","cancelled"];for(let e=0;e<50;e++){const u=s[e%s.length],o=Math.floor(e/10),n=new Date;n.setMonth(n.getMonth()-o),t.push({id:`sale-${e+1}`,salesExecutiveId:u.id,salesExecutiveName:u.name,date:n,productName:a[e%a.length],amount:Math.floor(5e4*Math.random())+1e4,quantity:Math.floor(10*Math.random())+1,status:c[e%3]})}return t}generateIncentiveRules(){return[{id:"rule-1",name:"Basic Sales Incentive",description:"5% incentive on all sales",type:"percentage",value:5,isActive:!0,createdBy:"admin",createdAt:new Date("2024-01-01")},{id:"rule-2",name:"High Value Sales Bonus",description:"10% incentive on sales above $50,000",type:"percentage",value:10,minSalesAmount:5e4,isActive:!0,createdBy:"admin",createdAt:new Date("2024-02-01")},{id:"rule-3",name:"Product A Special",description:"Fixed $500 bonus for Product A sales",type:"fixed",value:500,productCategory:"Product A",isActive:!0,createdBy:"team-lead-1",createdAt:new Date("2024-03-01")},{id:"rule-4",name:"Tiered Volume Incentive",description:"15% incentive on sales above $100,000",type:"tiered",value:15,minSalesAmount:1e5,isActive:!1,createdBy:"admin",createdAt:new Date("2024-04-01")}]}generateIncentivesEarned(){const t=[],s=this.generateSalesExecutives(),a=this.generateIncentiveRules(),c=["pending","approved","paid"];for(let e=0;e<30;e++){const u=s[e%s.length],o=a[e%a.length],n=Math.floor(e/10),i=new Date;i.setMonth(i.getMonth()-n),t.push({id:`incentive-${e+1}`,salesExecutiveId:u.id,salesExecutiveName:u.name,ruleId:o.id,ruleName:o.name,salesRecordId:`sale-${e+1}`,amount:Math.floor(5e3*Math.random())+500,earnedDate:i,status:c[e%3]})}return t}getSalesRecordsForExecutive(t){return this.salesRecordsSubject.value.filter(s=>s.salesExecutiveId===t)}getIncentivesForExecutive(t){return this.incentivesEarnedSubject.value.filter(s=>s.salesExecutiveId===t)}getReportDataForExecutive(t){const s=this.salesExecutivesSubject.value.find(n=>n.id===t),a=this.getSalesRecordsForExecutive(t),c=this.getIncentivesForExecutive(t),e=a.filter(n=>"completed"===n.status).reduce((n,i)=>n+i.amount,0),u=c.filter(n=>"pending"!==n.status).reduce((n,i)=>n+i.amount,0),o=[];for(let n=5;n>=0;n--){const i=new Date;i.setMonth(i.getMonth()-n);const h=i.toISOString().substring(0,7),R=a.filter(r=>r.date.toISOString().substring(0,7)===h&&"completed"===r.status).reduce((r,m)=>r+m.amount,0),E=c.filter(r=>r.earnedDate.toISOString().substring(0,7)===h&&"pending"!==r.status).reduce((r,m)=>r+m.amount,0);o.push({month:h,sales:R,incentives:E})}return{salesExecutiveId:t,salesExecutiveName:s?.name||"Unknown",totalSales:e,totalIncentives:u,period:"Last 6 months",breakdown:o}}getSalesExecutives(){return this.salesExecutivesSubject.value}getIncentiveRules(){return this.incentiveRulesSubject.value}addIncentiveRule(t){this.incentiveRulesSubject.next([...this.incentiveRulesSubject.value,t])}updateIncentiveRule(t,s){const c=this.incentiveRulesSubject.value.map(e=>e.id===t?{...e,...s}:e);this.incentiveRulesSubject.next(c)}deleteIncentiveRule(t){const a=this.incentiveRulesSubject.value.filter(c=>c.id!==t);this.incentiveRulesSubject.next(a)}static{this.\u0275fac=function(s){return new(s||v)}}static{this.\u0275prov=g.\u0275\u0275defineInjectable({token:v,factory:v.\u0275fac,providedIn:"root"})}}return v})()}}]);